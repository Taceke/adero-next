// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model JobApplication {
  id        Int     @id @default(autoincrement())
  jobId     String
  name      String
  email     String
  resumeUrl String
  createdAt DateTime @default(now())
}


model User {
  id          Int       @id @default(autoincrement())
  username    String?   @unique
  email       String    @unique
  firstName   String?
  lastName    String?
  password    String
  isStaff     Boolean   @default(false)
  isSuperuser Boolean   @default(false)
  position    Position? @relation(fields: [positionId], references: [id])
  positionId  Int?
  pic         String?   // image URL
  github      String?
  blogs       Blog[]
  createdAt   DateTime  @default(now())
}

model Position {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  mode        String
  jobType     String
  salary      Int?
  isOpen      Boolean   @default(true)
  openFrom    DateTime?
  openTo      DateTime?
  users       User[]
}

model Service {
  id       Int       @id @default(autoincrement())
  name     String     @unique
  detail   String?
  img      String?    // ðŸ‘ˆ MAKE THIS OPTIONAL
  messages Message[]
}


model FAQ {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
}

model Message {
 id        Int      @id @default(autoincrement()) // âœ… REQUIRED
  name      String
  email     String
  message   String
  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?
  createdAt DateTime @default(now())
}

model Blog {
  id          Int      @id @default(autoincrement())
  title       String
  subtitle    String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedBy User     @relation(fields: [publishedById], references: [id])
  publishedById Int
  catagory    String?
  publish     Boolean  @default(false)
  coverImg    String?
}
